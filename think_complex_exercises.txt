Chapter Two Exercises

Download http://thinkcomplex.com/GraphCode.py , which contains the code in this chapter. Run it as a script, and make sure the test code in main does what you expect.

Make a copy of GraphCode.py called Graph.py . Add the methods in Steps 3-9 to Graph , adding test code as you go.

Write a method named get_edge that takes two vertices and returns the edge between them if it exists and None otherwise. Hint: use a try statement.

Write a method named remove_edge that takes an edge and removes all references to it from the graph.

Write a method named vertices that returns a list of the vertices in a graph.

Write a method named edges that returns a list of edges in a graph. Note that in our representation of an undirected graph, there are two references to each edge.

Write a method named out_vertices that takes a Vertex and returns a list of the adjacent vertices (the ones connected to the given node by an edge).

Write a method named out_edges that takes a Vertex and returns a list of edges connected to the given Vertex .

Write a method named add_all_edges that starts with an edgeless Graph and makes a complete graph by adding edges between all pairs of vertices.

Convert the code in GraphCode.py to Python3.

Test your methods by writing test code and checking the output. 

Download http://thinkcomplex.com/GraphWorld.py . GraphWorld is a simple tool for generating visual representations of graphs. It is based on the World class in Swampy, so you might have to install Swampy first: see http://thinkpython.com/swampy .
